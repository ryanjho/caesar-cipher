{"version":3,"sources":["logo.svg","CaesarShift.js","Components/Code.js","Components/Decode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","caesarShift","str","amount","split","map","c","match","code","charCodeAt","String","fromCharCode","join","Code","props","handleChange","event","setState","message","target","value","state","className","onChange","this","placeholder","rows","cols","Component","Decode","React","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,0IC2B1BC,EA3BG,SAAdA,EAAeC,EAAKC,GAEtB,OAAIA,EAAS,EACJF,EAAYC,EAAKC,EAAS,IAGtBD,EAAIE,MAAM,IAAIC,KAAI,SAAAC,GAE7B,IAAIA,EAAEC,MAAM,UAaV,OAAOD,EAXP,IAAIE,EAAOF,EAAEG,WAAW,GAExB,OAAKD,GAAQ,IAAQA,GAAQ,GACpBE,OAAOC,cAAeH,EAAO,GAAKL,GAAU,GAAM,IAG/CK,GAAQ,IAAQA,GAAQ,IAC3BE,OAAOC,cAAeH,EAAO,GAAKL,GAAU,GAAM,SADpD,KAQGS,KAAK,KCERC,E,kDAtBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACC,QAASF,EAAMG,OAAOC,SALrC,EAAKC,MAAQ,CACTH,QAAS,IAHE,E,qDAUf,OACI,yBAAKI,UAAU,UACX,sCACA,uCACA,8BAAUC,SAAUC,KAAKT,aAAcU,YAAY,qCAAqCL,MAAOI,KAAKN,QAASQ,KAAK,KAAKC,KAAK,OAC5H,kDACA,2BAAK1B,EAAYuB,KAAKH,MAAMH,QAAS,S,GAjBlCU,aCuBJC,E,kDAtBX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAKVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACC,QAASF,EAAMG,OAAOC,SALrC,EAAKC,MAAQ,CACTH,QAAS,IAHE,E,qDAUf,OACI,yBAAKI,UAAU,UACX,sCACA,uCACA,8BAAUC,SAAYC,KAAKT,aAAcU,YAAY,qCAAqCL,MAAOI,KAAKN,QAASQ,KAAK,KAAKC,KAAK,OAC9H,kDACA,+BAAM1B,EAAYuB,KAAKH,MAAMH,SAAU,S,GAjBlCY,IAAMF,WCaZG,MAVf,WACE,OACE,yBAAKT,UAAU,OACb,mDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5B,MACvB,2DCZN6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9B,c","file":"static/js/main.b81d1cbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const caesarShift = (str, amount) => {\n    // Wrap the amount, deals with negatives\n    if (amount < 0) {\n      return caesarShift(str, amount + 26)\n    }\n    // go over each character\n    let output = str.split('').map(c => {\n      // check if it is a letter\n      if (c.match(/[a-z]/i)) {\n        // convert to number code\n        let code = c.charCodeAt(0)\n        // shift by number code uppercase\n        if ((code >= 65) && (code <= 90)) {\n          return String.fromCharCode(((code - 65 + amount) % 26) + 65)\n        // shift by number lowercase\n        // could just be else, but more readable to write another if statement\n        } else if ((code >= 97) && (code <= 122)) {\n          return String.fromCharCode(((code - 97 + amount) % 26) + 97)\n        }\n      // other character? Don't shift it\n      } else {\n        return c\n      }\n    })\n    return output.join('')\n  }\n\n  export default caesarShift;","import React, { Component } from 'react';\nimport caesarShift from '../CaesarShift';\n\nclass Code extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: ''\n        }\n    }\n    handleChange = event => {\n        this.setState({message: event.target.value});\n    }\n    render() {\n        return (\n            <div className=\"encode\">\n                <h1>Encode</h1>\n                <h2>Message</h2>\n                <textarea onChange={this.handleChange} placeholder=\"Input your message to be encrypted\" value={this.message} rows=\"10\" cols=\"50\"></textarea>\n                <h3>Encrypted Message:</h3>\n                <p>{ caesarShift(this.state.message, 5)}</p>\n            </div>\n        )\n    }\n}\n\nexport default Code;","import React, { Component } from 'react';\nimport caesarShift from '../CaesarShift';\n\nclass Decode extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: ''\n        }\n    }\n    handleChange = event => {\n        this.setState({message: event.target.value});\n    }\n    render() {\n        return(\n            <div className=\"decode\">\n                <h1>Decode</h1>\n                <h2>Message</h2>\n                <textarea onChange = {this.handleChange} placeholder=\"Input your message to be decrypted\" value={this.message} rows=\"10\" cols=\"50\"></textarea>\n                <h3>Decrypted Message:</h3>\n                <p> { caesarShift(this.state.message, -5)}</p>\n            </div>\n        )\n    }\n}\n\nexport default Decode;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Code from './Components/Code';\nimport Decode from './Components/Decode';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Caesar Cipher React</h1>\n      <Code />\n      <Decode />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}